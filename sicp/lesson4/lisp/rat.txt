+RAT
n1/d1 + n2/d2 = (n1*d2 + n2*d1) / (d1*d2)

(MAKE-RAT N D) --> (F N D)
(NUMBER (F N D)) --> N
(DENOM (F N D)) --> D

+RAT
(DEFINE (+RAT X Y)
    (MAKE-RAT
        (+ (* (NUMBER X) (DENOM Y))
           (* (NUMBER Y) (DENOM X)))
        (* (DENOM X) (DENOM Y))))

*RAT
n1/d1 * n2/d2 = (n1*n2)/(d1*d2)
(DEFINE (*RAT X Y)
    (MAKE-RAT
        (* (NUMBER X) (NUMBER Y))
        (* (DENOM X) (DENOM Y))))

(DEFINE (MAKE-RAT N D)
    (CONS N D))

(DEFINE (NUMBER X)
    (CAR X))

(DEFINE (DENOM X)
    (CDR X))

demo: 1/2 + 1/4
(DEFINE A (MAKE-RAT 1 2))
(DEFINE B (MAKE-RAT 1 4))
(DEFINE ANS (+RAT A B))

(NUMBER ANS) --> 6
(DENOM ANS) --> 8
存在的问题: 没有化简
对procedure:MAKE-RAT,添加化简
(DEFINE (MAKE-RAT N D)
    (LET (G GCD(N D)))
    (CONS (/ N G) (/D G)))

思想:
不要想着在大型系统中,先行完全想好实现的细节.而是要先想好这个实现是用来做什么的?
即, 面向接口编程.

LISP语法:
自带procedure:CONS, CAR, CDR, LET
(CONS X Y)用来表示一对序列队.第一部分(CAR)指向X, 第二部分(CDR)指向Y;
(CAR (CONS X Y)) --> X
(CDR (CONS X Y)) --> Y

LET, 可以理解为局部上下文. 只在当前定义的procedure有效.
DEFINE, 可以理解为全局上下文, 可以在整个LISP环境中有效.


=============================================LISP实现向量=============================================
make-vector代表一个x坐标, y坐标组成的点
(DEFINE (MAKE-VECTOR X Y)
    (CONS X Y))

XCONS 对 点S, 返回S的x坐标
(DEFINE (XCONS S)
    (CAR S))

YCONS 对 点S, 返回S的y坐标
(DEFINE (YCONS S)
    (CDR S))

MAKE-SEG, 代表一个由 点P 到 点Q 的向量
(DEFINE (MAKE-SEG P Q)
    (CONS P Q))

(DEFINE (SEG-START S)
    (CAR S))
(DEFINE (SEG-END S)
    (CDR S))

求点P到点Q的线段,中点的坐标
(DEFINE (MIDPOINT S)
    (LET
        A (SEG-START S)
        B (SEG-END S))
    (MAKE-VECTOR
        (AVERAGE (XCONS A) (XCONS B))
        (AVERAGE (YCONS A) (YCONS B))))

求点P到点Q的线段,长度是多少
(DEFINE (LENGTH S)
    (LET
        A (SEG-START S)
        B (SEG-END S)
        DX (- (XCONS B) (XCONS A))
        DY (- (YCONS B) (YCONS A)))
    (SQRT (+ (SQUARE DX) (SQUARE DY))))

(DEFINE (LENGTH S)
    (LET
        DX (- (CAR (CDR S)) (CAR (CAR S)))
        DY (- (CDR (CDR S)) (CDR (CAR S))))
    (SQRT (+ (SQUARE DX) (SQUARE DY))))